#pragma kernel GenerateBaseMesh
#pragma kernel GenerateHeightMesh
#pragma kernel Paint
#pragma kernel Reset
#pragma kernel Pixel

struct Triangle{
    float3 A;
    float3 B;
    float3 C;
    //float3 N;
};

RWTexture2D<float4> Result;
RWTexture2D<float4> Preview;
AppendStructuredBuffer<Triangle> TriangleBuffer;
RWStructuredBuffer<float3> PositionBuffer;

float3 _WorldPos;
float4 _MousePosition;
float4 _MouseStartPosition;
float _BrushSize;
float _BrushStrength;
int _BrushType;
int _BrushOverrideType;
uniform bool _BrushHasPreview;
uniform bool _BrushIsPreview;
uint2 _TexSize;
uint3 _WorldSize;
static uint VertCount = 6;
// keep this equal to TTSettings.Bands!
const static int Bands = 10;
static int VertexMapLength = 28;
static int VertexLookupLength0 = 15;
static int VertexLookupLength1 = 48;

/** Maps the height number into the corresponding vertex structure, see
    * https://www.boristhebrave.com/2021/12/29/2d-marching-cubes-with-multiple-colors/
    * -1 => invalid index
    */
static int VertexMap[] =
{
    //0, 1, -2, -3, 4, 5, 6, -7, -8, -9, -10, -11, -12, -13, -14, -15, 16, 17, 18, -19, 20, 21, 22, -23, 24, 25, 26, 27
      0, 1, -1, -1, 2, 3, 4, -1, -1, -1, -1,   -1,  -1,  -1,  -1,  -1,  5,  6,  7,  -1,  8,  9, 10,  -1, 11, 12, 13, 14
};

/** 
 * indices to vertices arranged in a plane
 * 0--4/8--1
 * |       |
 * 5/9-X---6/10
 * |       |
 * 2--7/11-3
 * where x is 12, 13, 14, 15
 * Index dictates the height lookup (ie 4-> spline 0 to 1, lower number so start height: v0)
 * Connecting triples into triangles results in the actual mesh part
 */
groupshared int VertexLookup[15][48] = 
{
    {0, 1, 2, 1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 2, 1, 6, 7, 7, 2, 1, 6, 11, 7, 6, 10, 11, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 3, 0, 11, 5, 0, 3, 11, 7, 9, 11, 5, 11, 9, 9, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 5, 1, 6, 5, 5, 10, 9, 6, 10, 5, 9, 10, 2, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 1, 5, 1, 6, 5, 5, 12, 9, 12, 14, 9, 12, 6, 15, 6, 10, 15, 9, 14, 7, 7, 2, 9, 15, 10, 3, 3, 11, 15, 15, 14, 7, 7, 11, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 3, 2, 0, 4, 10, 10, 3, 0, 4, 8, 6, 6, 10, 4, 8, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 7, 7, 2, 0, 4, 8, 11, 11, 7, 4, 8, 1, 3, 3, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 7, 7, 2, 0, 4, 8, 13, 13, 12, 4, 14, 15, 11, 11, 7, 14, 15, 10, 3, 3, 11, 15, 8, 1, 6, 6, 13, 8, 13, 6, 10, 10, 15, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 5, 4, 8, 9, 9, 5, 4, 8, 1, 6, 7, 2, 9, 9, 8, 6, 6, 7, 9, 7, 6, 10, 10, 11, 7, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 5, 4, 8, 9, 9, 5, 4, 8, 1, 6, 8, 6, 7, 7, 9, 8, 9, 7, 2, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 5, 4, 8, 9, 9, 5, 4, 8, 1, 6, 7, 2, 9, 9, 8, 6, 6, 7, 9, 7, 6, 10, 10, 11, 7, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 5, 4, 10, 11, 11, 5, 4, 10, 3, 11, 4, 8, 6, 6, 10, 4, 5, 11, 7, 7, 9, 5, 9, 7, 2, 8, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {8, 1, 3, 3, 11, 8, 4, 8, 13, 13, 12, 4, 14, 15, 11, 11, 7, 14, 0, 4, 12, 12, 5, 0, 9, 14, 7, 7, 2, 9, 5, 12, 14, 14, 9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {9, 10, 3, 3, 2, 9, 5, 9, 14, 14, 12, 5, 15, 10, 6, 6, 13, 15, 0, 4, 12, 12, 5, 0, 8, 1, 6, 6, 13, 8, 4, 8, 13, 13, 12, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {0, 4, 12, 12, 5, 0, 8, 1, 6, 6, 13, 8, 15, 10, 3, 3, 11, 15, 7, 2, 9, 9, 14, 7, 9, 5, 12, 12, 14, 9, 4, 8, 13, 13, 12, 4, 13, 6, 10, 10, 15, 13, 11, 7, 14, 14, 15, 11}
};


/** 
 * contains {Xpos, ZPos, HeightLookup}
 */
static float VertexToWorld[16][3] = {
    // regular points
    {0, 1, 0},
    {1, 1, 1},
    {0, 0, 2},
    {1, 0, 3},
    // in between, first 
    {.5f, 1, 0},
    {0, .5f, 0},
    {1, .5f, 1},
    {.5f, 0, 2},
    // in between, last
    {.5f, 1, 1},
    {0, .5f, 2},
    {1, .5f, 3},
    {.5f, 0, 3},
    // center for vertex 0, 1, 2, 3
    {.5f, .5f, 0},
    {.5f, .5f, 1},
    {.5f, .5f, 2},
    {.5f, .5f, 3},
};


/** Uses height interpolation to calculate the resulting WorldPos*/
float3 GetVertex(int Index, int Heights[4])
{
    float Temp[3] = VertexToWorld[Index];
    float3 Result = float3(Temp[0], Heights[(int)Temp[2]], Temp[1]);
    return Result;
}

int GetHeightID(int Heights[4]){

    int HeightMap[Bands];
    for (int i = 0; i < Bands; i++){
        HeightMap[i] = -1;
    }
    int CurIndex = 0;
    if (HeightMap[Heights[0]] < 0){
        HeightMap[Heights[0]] = CurIndex;
        CurIndex++;
    }
    if (HeightMap[Heights[1]] < 0){
        HeightMap[Heights[1]] = CurIndex;
        CurIndex++;
    }
    if (HeightMap[Heights[2]] < 0){
        HeightMap[Heights[2]] = CurIndex;
        CurIndex++;
    }
    if (HeightMap[Heights[3]] < 0){
        HeightMap[Heights[3]] = CurIndex;
        CurIndex++;
    }

    // heightMap[0] is always 0!
    int HeightID = HeightMap[Heights[3]] + HeightMap[Heights[2]] * 4 + HeightMap[Heights[1]] * 16;
    
    //Triangle S;
    //S.A = float3(Heights[0], Heights[1], Heights[2]);
    //S.B = float3(Heights[3], HeightMap[Heights[0]], HeightMap[Heights[1]]);
    //S.C = float3(HeightMap[Heights[2]], HeightMap[Heights[3]], HeightID);
    //TriangleBuffer.Append(S);

    return HeightID;
}                    

[numthreads(1,1,1)]
void GenerateHeightMesh(uint3 id: SV_DispatchThreadID){
    float3 IDOffset = float3(id.x, 0, id.y);
    // height indicates the type of mesh via lookup table
    // clamped to different height bands
    int Height0 = (int)(Result[id.xy + uint2(0, 1)].r * (Bands - 1));
    int Height1 = (int)(Result[id.xy + uint2(1, 1)].r * (Bands - 1));
    int Height2 = (int)(Result[id.xy + uint2(0, 0)].r * (Bands - 1));
    int Height3 = (int)(Result[id.xy + uint2(1, 0)].r * (Bands - 1));

    int Heights[4] = { Height0, Height1, Height2, Height3 };
    int HeightID = GetHeightID(Heights);
    if (HeightID >= VertexMapLength)
        return;

    int LookupID = VertexMap[HeightID];
    if (LookupID < 0 || LookupID >= VertexLookupLength0)
        return;

    int VertexIndices[] = VertexLookup[LookupID];

    // lookup the blueprint for the structure
    for (int i = 0; i < VertexLookupLength1; i += 3)
    {
        if (VertexIndices[i] == -1)
            break;

        float3 A = GetVertex(VertexIndices[i + 0], Heights) + IDOffset;
        float3 B = GetVertex(VertexIndices[i + 1], Heights) + IDOffset;
        float3 C = GetVertex(VertexIndices[i + 2], Heights) + IDOffset;
        // scale back down to 1x1x1
        A.y = A.y / (Bands - 2) * _WorldSize.y;
        B.y = B.y / (Bands - 2) * _WorldSize.y;
        C.y = C.y / (Bands - 2) * _WorldSize.y;
        A.xz = A.xz / _TexSize * _WorldSize.xz;
        B.xz = B.xz / _TexSize * _WorldSize.xz;
        C.xz = C.xz / _TexSize * _WorldSize.xz;
        A += _WorldPos;
        B += _WorldPos;
        C += _WorldPos;

        Triangle T;
        T.A = A;
        T.B = B;
        T.C = C;
        TriangleBuffer.Append(T);
    }
}

[numthreads(1,1,1)]
void GenerateBaseMesh (uint3 id : SV_DispatchThreadID)
{
    int Index = id.y * _TexSize.x + id.x;
    PositionBuffer[Index * VertCount + 0] = float3(0 + id.x, 0, 0 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
    PositionBuffer[Index * VertCount + 1] = float3(0 + id.x, 0, 1 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
    PositionBuffer[Index * VertCount + 2] = float3(1 + id.x, 0, 0 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
    PositionBuffer[Index * VertCount + 3] = float3(1 + id.x, 0, 0 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
    PositionBuffer[Index * VertCount + 4] = float3(0 + id.x, 0, 1 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
    PositionBuffer[Index * VertCount + 5] = float3(1 + id.x, 0, 1 + id.y) / float3(_TexSize.x, 1, _TexSize.y) * _WorldSize + _WorldPos;
}

float GetFallOff(float Value){
    Value = (_BrushType == 0) ? clamp(Value, 0, 1) : (Value > 0);
    Value = (int)(Value * Bands) / (float)Bands;
    return Value;
}

float GetStrengthOverride(float Value, float ExistingValue){
    // either mix with existing value 
    float SmoothedValue = _BrushStrength > 0 ? max(ExistingValue, Value) : min(ExistingValue, abs(Value));
    // or simply add together
    Value = _BrushOverrideType ? SmoothedValue : (ExistingValue + Value);
    return Value;
}

float GetBrushValueAt(uint2 id, float OldValue){
    float2 World = id.xy / (float)_TexSize * _WorldSize.xz;
    float v = 1 - distance(_MousePosition.xz - _WorldPos.xz, World) / _BrushSize;

    v = GetFallOff(v);
    v = GetStrengthOverride(v, OldValue);
    v *= _BrushStrength;
    return v;
}

void ApplyPreviewSelection(uint2 id){
    float2 StartUV = (_MouseStartPosition.xz - _WorldPos.xz) / _WorldSize.xz;
    uint2 StartID = StartUV * _TexSize;
    float StartHeight = Result[StartID].x;
    float CurrentHeight = Result[id].x;
    if (abs(CurrentHeight - StartHeight) > .01)
        return;

    float d = GetBrushValueAt(id, Preview[id].x);
    Preview[id] = float4(d, 0, 0, 1);
}

void ApplyPaintValue(uint2 id){
    if (_BrushIsPreview){
        ApplyPreviewSelection(id);
    }else{
        float d = GetBrushValueAt(id, Result[id].x);
        Result[id] = float4(d, 0, 0, 1);
    }
}

void ApplyPaintPreviewValue(uint2 id){
    Result[id.xy] += Preview[id.xy] * _BrushStrength;
}

[numthreads(1,1,1)]
void Paint(uint3 id: SV_DispatchThreadID){
    bool bShouldUsePreview = _BrushHasPreview && !_BrushIsPreview;
    if (bShouldUsePreview){
        ApplyPaintPreviewValue(id.xy);
    }else{
        ApplyPaintValue(id.xy);
    }
}


[numthreads(1,1,1)]
void Reset(uint3 id: SV_DispatchThreadID){

    Result[id.xy] = 0;
}

[numthreads(1,1,1)]
void Pixel(uint3 id: SV_DispatchThreadID){
    float d = id.x / (float)_TexSize.x;
    //d = (int)(d * Bands) / (float)(Bands - 1);
    Result[id.xy] = float4(d, 0, 0, 1);

}