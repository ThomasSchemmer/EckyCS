#pragma kernel CSMain

RWTexture2D<float4> HeightMap;
AppendStructuredBuffer<float3> PositionBuffer;
RWTexture2D<float4> Output;

float3 WorldSize;
float3 WorldPos;
float2 TexSize;
float HeightCutoff;
float InverseScale;
int Bands;

shared static uint ThreadCount = 1;

float3 PixelToWorld(uint2 Pixel){
	float Height = WorldSize.y / (Bands - 2);
	float3 PixelWorldPos = float3(
		Pixel.x / TexSize.x * WorldSize.x,
		(int)(HeightMap[Pixel].x * (Bands - 1)) * Height,
		Pixel.y / TexSize.y * WorldSize.z
	);
	PixelWorldPos += WorldPos;
	return PixelWorldPos;
}

// https://www.shadertoy.com/view/4djSRW
float hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}



[numthreads(ThreadCount,ThreadCount,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint2 Pixel = id.xy * InverseScale;
	uint2 NextPixel = clamp(Pixel + 1 * InverseScale, 0, TexSize);
	float3 MinPos = PixelToWorld(Pixel);
	float3 MaxPos = PixelToWorld(NextPixel);
	float Length = distance(MinPos.xz, MaxPos.xz) / ThreadCount;;
	
	bool bHighEnough = MinPos.y > -.5;
	bool bShouldRender = bHighEnough;
	
	// early return might not be best for shader performance
	if (!bShouldRender)
		return;

	float3 Pos = MinPos;
	Pos.x += hash12(Pos.xz) * Length * .5;
	Pos.z += hash12(Pos.zx) * Length * .5;
	
	PositionBuffer.Append(Pos);
	
}
